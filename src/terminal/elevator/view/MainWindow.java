/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package terminal.elevator.view;

import java.awt.Color;
import terminal.elevator.state.ElevatorManagerState;
import terminal.elevator.threads.ElevatorManager;

/**
 *
 * @author User
 */
public class MainWindow extends javax.swing.JFrame {
    ElevatorManager em;
    boolean built;
    boolean running;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        built = false;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner2 = new javax.swing.JSpinner();
        elevatorSlider = new javax.swing.JSlider();
        personSlider = new javax.swing.JSlider();
        elevatorsLabel = new javax.swing.JLabel();
        personsLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        buildButton = new javax.swing.JButton();
        elevatorsQntLabel = new javax.swing.JLabel();
        personQntLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TerminalElevator");
        setBackground(new java.awt.Color(240, 251, 251));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        elevatorSlider.setMajorTickSpacing(5);
        elevatorSlider.setMaximum(10);
        elevatorSlider.setMinorTickSpacing(1);
        elevatorSlider.setPaintLabels(true);
        elevatorSlider.setPaintTicks(true);
        elevatorSlider.setSnapToTicks(true);
        elevatorSlider.setValue(1);
        elevatorSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                elevatorSliderMouseDragged(evt);
            }
        });
        elevatorSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                elevatorSliderMouseReleased(evt);
            }
        });
        elevatorSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                elevatorSliderPropertyChange(evt);
            }
        });

        personSlider.setMajorTickSpacing(25);
        personSlider.setMinorTickSpacing(5);
        personSlider.setPaintLabels(true);
        personSlider.setPaintTicks(true);
        personSlider.setSnapToTicks(true);
        personSlider.setValue(5);
        personSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                personSliderMouseDragged(evt);
            }
        });
        personSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                personSliderMouseReleased(evt);
            }
        });
        personSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                personSliderPropertyChange(evt);
            }
        });

        elevatorsLabel.setText("Elevators");

        personsLabel.setText("Persons");

        progressBar.setToolTipText("Completion");
        progressBar.setName("Completion"); // NOI18N
        progressBar.setStringPainted(true);
        progressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressBarStateChanged(evt);
            }
        });

        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.setMaximumSize(new java.awt.Dimension(60, 25));
        startButton.setMinimumSize(new java.awt.Dimension(60, 25));
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                startButtonMouseReleased(evt);
            }
        });

        buildButton.setText("Build");
        buildButton.setMaximumSize(new java.awt.Dimension(60, 25));
        buildButton.setMinimumSize(new java.awt.Dimension(60, 25));
        buildButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buildButtonMouseReleased(evt);
            }
        });

        elevatorsQntLabel.setText("Elevators");

        personQntLabel.setText("Persons");

        clearButton.setText("Clear");
        clearButton.setEnabled(false);
        clearButton.setMaximumSize(new java.awt.Dimension(60, 25));
        clearButton.setMinimumSize(new java.awt.Dimension(60, 25));
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clearButtonMouseReleased(evt);
            }
        });

        reportButton.setText("Report");
        reportButton.setEnabled(false);
        reportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                reportButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(elevatorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(elevatorsQntLabel)
                                .addGap(68, 68, 68)
                                .addComponent(personQntLabel))
                            .addComponent(elevatorsLabel)
                            .addComponent(personsLabel)
                            .addComponent(personSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clearButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buildButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(reportButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elevatorsLabel)
                    .addComponent(buildButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(elevatorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(personsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(personSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(elevatorsQntLabel)
                            .addComponent(personQntLabel))))
                .addGap(26, 26, 26)
                .addComponent(reportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        elevatorsLabel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elevatorSliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_elevatorSliderPropertyChange
        // TODO add your handling code here:
        refreshElevators();
    }//GEN-LAST:event_elevatorSliderPropertyChange

    private void elevatorSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elevatorSliderMouseDragged
        // TODO add your handling code here:
        refreshElevators();
    }//GEN-LAST:event_elevatorSliderMouseDragged

    private void elevatorSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elevatorSliderMouseReleased
        // TODO add your handling code here:
        refreshElevators();
    }//GEN-LAST:event_elevatorSliderMouseReleased

    private void personSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personSliderMouseDragged
        // TODO add your handling code here:
        refreshPersons();
    }//GEN-LAST:event_personSliderMouseDragged

    private void personSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personSliderMouseReleased
        // TODO add your handling code here:
        refreshPersons();
    }//GEN-LAST:event_personSliderMouseReleased

    private void personSliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_personSliderPropertyChange
        // TODO add your handling code here:
        refreshPersons();
    }//GEN-LAST:event_personSliderPropertyChange

    private void buildButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildButtonMouseReleased
        // TODO add your handling code here:
        build();
    }//GEN-LAST:event_buildButtonMouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void startButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseReleased
        // TODO add your handling code here:
        start();
    }//GEN-LAST:event_startButtonMouseReleased

    private void clearButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseReleased
        // TODO add your handling code here:
        stop();
    }//GEN-LAST:event_clearButtonMouseReleased

    private void progressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressBarStateChanged
        // TODO add your handling code here:
        if(progressBar.getValue() == 100)
            reportButton.setEnabled(true);
        else
            reportButton.setEnabled(false);
    }//GEN-LAST:event_progressBarStateChanged

    private void reportButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButtonMouseReleased
        // TODO add your handling code here:
        report();
    }//GEN-LAST:event_reportButtonMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JSlider elevatorSlider;
    private javax.swing.JLabel elevatorsLabel;
    private javax.swing.JLabel elevatorsQntLabel;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JLabel personQntLabel;
    private javax.swing.JSlider personSlider;
    private javax.swing.JLabel personsLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
    
    private void refreshElevators(){
        elevatorsQntLabel.setText("Elevators: "+String.valueOf(elevatorSlider.getValue()));
    }
    
    private void refreshPersons(){
        personQntLabel.setText("Persons: "+String.valueOf(personSlider.getValue()));
    }
    
    private void start(){
        if(built){
            em.start();
            running = true;
        }
        clearButton.setEnabled(true);
        startButton.setEnabled(false);
    }
    
    private void stop(){
        running = false;
        em = null;
        built = false;
        
        clearButton.setEnabled(false);
        startButton.setEnabled(false);
        buildButton.setEnabled(true);
        progressBar.setValue(0);
        personSlider.setEnabled(true);
        elevatorSlider.setEnabled(true);
        reportButton.setEnabled(false);
    }
    
    private void build(){
        em = new ElevatorManager(personSlider.getValue(),elevatorSlider.getValue(),progressBar);
        built = true;
        startButton.setEnabled(true);
        buildButton.setEnabled(false);
        personSlider.setEnabled(false);
        elevatorSlider.setEnabled(false);
    }
    
    public void report(){
        if(!em.isAlive())
            em.doReport();
    }
}
